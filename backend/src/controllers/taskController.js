import Task from "../models/Task.js";

/**
 * R√©cup√©rer toutes les t√¢ches
 */
export const getTasks = async (req, res) => {
  try {
    console.log("Fetching tasks...");
    const tasks = await Task.find()
      .populate("assignedTo", "name email")
      .populate("createdBy", "name email");

    console.log(`Found ${tasks.length} tasks`);
    res.status(200).json(tasks);
  } catch (error) {
    console.error("Error fetching tasks:", error);
    res.status(500).json({ error: "Impossible de charger les t√¢ches" });
  }
};

/**
 * Cr√©er une nouvelle t√¢che
 */
export const createTask = async (req, res) => {
  try {
    console.log("Creating task:", req.body);

    // Cr√©er la t√¢che avec les donn√©es fournies
    const task = new Task({
      ...req.body,
      createdBy: req.user.userId, // Utilisateur connect√©
    });

    // Sauvegarder dans la base de donn√©es
    await task.save();
    console.log("Task created:", task._id);

    // R√©cup√©rer la t√¢che avec les champs li√©s peupl√©s
    const populatedTask = await Task.findById(task._id)
      .populate("assignedTo", "name email")
      .populate("createdBy", "name email");

    res.status(201).json(populatedTask);
  } catch (error) {
    console.error("Error creating task:", error);
    res.status(400).json({ error: error.message || "Impossible de cr√©er la t√¢che" });
  }
};

/**
 * Mettre √† jour une t√¢che
 */
export const updateTask = async (req, res) => {
  try {
    console.log("Updating task:", req.params.id, req.body);

    // Mettre √† jour la t√¢che et retourner la version mise √† jour
    const task = await Task.findByIdAndUpdate(req.params.id, req.body, {
      new: true, // Retourner la t√¢che mise √† jour
      runValidators: true, // Appliquer les validations du mod√®le
    })
      .populate("assignedTo", "name email")
      .populate("createdBy", "name email");

    if (!task) {
      return res.status(404).json({ error: "T√¢che non trouv√©e" });
    }

    console.log("Task updated:", task._id);
    res.status(200).json(task);
  } catch (error) {
    console.error("Error updating task:", error);
    res.status(400).json({ error: error.message || "Impossible de mettre √† jour la t√¢che" });
  }
};

/**
 * Supprimer une t√¢che
 */
export const deleteTask = async (req, res) => {
  try {
    console.log("Deleting task:", req.params.id);

    // Supprimer la t√¢che
    const task = await Task.findByIdAndDelete(req.params.id);

    if (!task) {
      return res.status(404).json({ error: "T√¢che non trouv√©e" });
    }

    console.log("Task deleted:", req.params.id);
    res.status(200).json({ message: "T√¢che supprim√©e avec succ√®s" });
  } catch (error) {
    console.error("Error deleting task:", error);
    res.status(500).json({ error: error.message || "Impossible de supprimer la t√¢che" });
  }
};

/**
 * Obtenir les statistiques des t√¢ches
 */
export const getTaskStats = async (req, res) => {
  try {
    console.log("üìä Calculating task statistics...");
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    console.log("üìÖ Period:", {
      from: startOfMonth.toISOString(),
      to: now.toISOString()
    });

    const [completed, inProgress, overdue, allCompletedTasks] = await Promise.all([
      // T√¢ches termin√©es ce mois
      Task.countDocuments({
        status: 'done',
        completedAt: { $gte: startOfMonth }
      }).then(count => {
        console.log(`‚úÖ Completed tasks this month: ${count}`);
        return count;
      }),
      
      // T√¢ches en cours
      Task.countDocuments({
        status: { $in: ['in_progress', 'review'] }
      }).then(count => {
        console.log(`üîÑ Tasks in progress: ${count}`);
        return count;
      }),
      
      // T√¢ches en retard
      Task.countDocuments({
        status: { $ne: 'done' },
        deadline: { $lt: now }
      }).then(count => {
        console.log(`‚ö†Ô∏è Overdue tasks: ${count}`);
        return count;
      }),
      
      // Toutes les t√¢ches termin√©es pour calculer le temps moyen
      Task.find({
        status: 'done',
        completedAt: { $exists: true },
        createdAt: { $exists: true }
      }).then(tasks => {
        console.log(`üìà Total completed tasks for average calculation: ${tasks.length}`);
        return tasks;
      })
    ]);

    // Calculer le temps moyen de compl√©tion
    let averageCompletionTime = 0;
    if (allCompletedTasks.length > 0) {
      const totalCompletionTime = allCompletedTasks.reduce((acc, task) => {
        const completionTime = task.completedAt - task.createdAt;
        return acc + completionTime;
      }, 0);
      // Convertir en jours et arrondir √† 1 d√©cimale
      averageCompletionTime = Math.round((totalCompletionTime / allCompletedTasks.length / (1000 * 60 * 60 * 24)) * 10) / 10;
      console.log(`‚è±Ô∏è Average completion time: ${averageCompletionTime} days`);
    }

    const stats = {
      completed,
      inProgress,
      overdue,
      averageCompletionTime,
      lastUpdated: now
    };

    console.log("üìä Final statistics:", stats);

    return res.status(200).json(stats);
  } catch (error) {
    console.error('‚ùå Error calculating statistics:', error);
    return res.status(500).json({ 
      success: false,
      message: "Erreur lors de la r√©cup√©ration des statistiques",
      error: error.message 
    });
  }
};